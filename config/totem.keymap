//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Nav         1
#define Sym         2
#define Fun         3
#define Game        4
#define Gameplus    5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <130>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td_Macro_Net: td_Macro_Net {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MACRO_NET";
            #binding-cells = <0>;
            bindings = <&Macro_Net1>, <&Macro_Net2>;

            tapping-term-ms = <350>;
        };

        td_Refresh: td_Refresh {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_REFRESH";
            #binding-cells = <0>;
            bindings = <&kp LC(R)>, <&Mecro_Refresh>;

            tapping-term-ms = <350>;
        };

        td_mail: td_mail {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MAIL";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(G))>, <&kp LA(LC(N))>;
        };

        td_chrome_newtab: td_chrome_newtab {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CHROME_NEWTAB";
            #binding-cells = <0>;
            bindings = <&kp LC(T)>, <&kp LC(LS(T))>;

            tapping-term-ms = <350>;
        };

        over_S_save: over_S_save {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_S_SAVE";
            bindings = <&kp S>, <&kp LC(S)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_I_Up: over_I_Up {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_I_UP";
            bindings = <&kp I>, <&kp LS(UP_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_J_Left: over_J_Left {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_J_LEFT";
            bindings = <&kp J>, <&kp LS(LEFT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_K_Down: over_K_Down {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_K_DOWN";
            bindings = <&kp K>, <&kp LS(DOWN_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_L_Right: over_L_Right {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_L_RIGHT";
            bindings = <&kp L>, <&kp LS(RIGHT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hmc: homerow_mods_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMC";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <130>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <34>;
        };

        OSM_shift: OSM_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "OSM_SHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <200>;
            quick-release;
        };

        LT_hold: LT_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <140>;
            retro-tap;
        };

        MT_hold: MT_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <200>;
        };

        over_R_f4: over_R_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_R_F4";
            bindings = <&kp R>, <&kp LA(F4)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_D_ctl: over_D_ctl {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_D_CTL";
            bindings = <&kp D>, <&kp LC(D)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_E_ctl: over_E_ctl {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_E_CTL";
            bindings = <&kp E>, <&kp LC(E)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_F_ctl: over_F_ctl {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_F_CTL";
            bindings = <&kp F>, <&kp LC(F)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Delete_alt {
            bindings = <&hm LEFT_ALT DEL>;
            key-positions = <11 12>;
            layers = <0 2>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <16 17>;
            layers = <0 2>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <19 31>;
            layers = <0 2>;
            timeout-ms = <350>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0 2 3>;
        };

        brackets {
            bindings = <&Macro_brackets>;
            key-positions = <13 14>;
            layers = <0 2 3>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <0 1 8 9>;
            layers = <0 2>;
            timeout-ms = <350>;
        };

        four {
            bindings = <&kp DOLLAR>;
            key-positions = <4 3>;
            layers = <0 3 2>;
            require-prior-idle-ms = <100>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <27 28>;
            timeout-ms = <350>;
            layers = <0 2>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <18 17>;
            layers = <0 2>;
        };

        quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <30 29>;
            layers = <0 2>;
        };

        delete {
            bindings = <&hm LEFT_SHIFT DELETE>;
            key-positions = <12 13>;
            layers = <0 2 3>;
        };

        qua {
            bindings = <&kp SQT>;
            key-positions = <29 28>;
            layers = <0 2 3>;
            require-prior-idle-ms = <100>;
        };

        win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <21 22>;
            layers = <0 2>;
        };

        xcut {
            bindings = <&kp LC(X)>;
            key-positions = <22 23>;
            timeout-ms = <350>;
            layers = <0 2>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <23 24>;
            layers = <0 2 3>;
        };

        five {
            bindings = <&kp PERCENT>;
            key-positions = <6 5>;
            layers = <0 3 2>;
            require-prior-idle-ms = <100>;
        };

        six {
            bindings = <&kp CARET>;
            key-positions = <6 7>;
            layers = <0 3 2>;
            require-prior-idle-ms = <100>;
        };

        seven {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 7>;
            layers = <0 3 2>;
        };

        two {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 2>;
            layers = <0 3 2>;
            require-prior-idle-ms = <100>;
        };

        three {
            bindings = <&kp HASH>;
            key-positions = <2 3>;
            layers = <0 3 2>;
            require-prior-idle-ms = <100>;
        };

        eight {
            bindings = <&kp ASTERISK>;
            key-positions = <8 9>;
            layers = <0 3 2>;
            require-prior-idle-ms = <100>;
        };

        wave {
            bindings = <&hm LEFT_CONTROL TILDE>;
            key-positions = <10 11>;
            layers = <0 3 2>;
        };

        Macro_brackets {
            bindings = <&Macro_bracket_r>;
            key-positions = <15 16>;
            layers = <0 2>;
            timeout-ms = <350>;
        };

        TG {
            bindings = <&tog 2>;
            key-positions = <10 19 11 18>;
            layers = <0 2>;
        };

        gaming {
            bindings = <&tog 1>;
            key-positions = <20 31>;
            layers = <0 1>;
        };

        backtick {
            bindings = <&kp GRAVE>;
            key-positions = <20 10>;
            layers = <0 2>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <31 30>;
            layers = <0 2>;
        };

        win_tab {
            bindings = <&kp LG(TAB)>;
            key-positions = <0 20>;
            layers = <0 2>;
        };

        semi {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 18>;
            layers = <0 2>;
        };
    };

    macros {
        Macro_Net1: net_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ARROW &kp LEFT_ARROW &kp N0 &kp ENTER>;
            label = "NET_MACRO";
        };

        Macro_Net2: net_macro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ARROW &kp N0 &kp N0 &kp ENTER>;
            label = "NET_MACRO2";
        };

        Mecro_Log: Mecro_Log {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp L &kp D &kp M &kp D &kp D &kp L>;
            label = "MECRO_LOG";
        };

        Mecro_Refresh: Mecro_Refresh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(C) &kp LC(R)>;
            label = "MECRO_REFRESH";
        };

        Macro_brackets: Macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "MACRO_BRACKETS";
        };

        Macro_bracket_r: Macro_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "MACRO_BRACKET";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Totem {
            display-name = "Totem";
            bindings = <
                       &kp Q  &kp W         &over_E_ctl  &over_R_f4   &kp T               &kp Y            &kp U         &over_I_Up     &kp O          &kp P
                       &kp A  &over_S_save  &over_D_ctl  &over_F_ctl  &kp G               &kp H            &over_J_Left  &over_K_Down   &over_L_Right  &kp B
&OSM_shift LEFT_SHIFT  &kp Z  &kp X         &kp C        &kp V        &kp B               &kp N            &kp M         &kp COMMA      &kp PERIOD     &kp SLASH  &OSM_shift RIGHT_SHIFT
                                            &lt 5 TAB    &lt 4 SPACE  &LT_hold 3 ENTER    &lt 4 BACKSPACE  &kp SPACE     &kp LS(SPACE)
            >;
        };

        Gaming {
            bindings = <
              &kp TAB    &kp Q  &kp W     &kp E      &kp R          &kp Y     &kp U           &kp UP_ARROW    &kp O            &kp P
              &kp LSHFT  &kp A  &kp S     &kp D      &kp F          &kp H     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp SEMI
&lt 0 ESCAPE  &kp LCTRL  &kp Z  &kp X     &kp C      &kp V          &kp N     &kp M           &kp COMMA       &kp DOT          &kp FSLH  &kp ENTER
                                &kp LALT  &kp SPACE  &lt 6 ENTER    &kp BSPC  &lt 0 SPACE     &kp LS(SPACE)
            >;

            label = "ISAAC'-'";
        };

        Colemak {
            bindings = <
           &kp Q  &kp W  &kp F      &kp P        &kp B          &kp J            &kp L      &kp U          &kp Y    &kp SEMI
           &kp A  &kp R  &kp S      &kp T        &kp G          &kp M            &kp N      &kp E          &kp I    &kp O
&kp LSHFT  &kp Z  &kp X  &kp C      &kp D        &kp V          &kp K            &kp H      &kp COMMA      &kp DOT  &kp FSLH  &kp RSHFT
                         &lt 5 TAB  &lt 0 SPACE  &lt 3 ENTER    &lt 4 BACKSPACE  &kp SPACE  &kp LS(SPACE)
            >;

            label = "Colemak";
        };

        Numpad {
            display-name = "Numpad";
            bindings = <
           &kp TILDE  &kp LC(W)       &kp UP_ARROW    &td_Refresh      &td_chrome_newtab    &kp N7         &kp N8        &kp N9        &kp MINUS       &kp PLUS
           &kp LC(A)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(G)            &kp NUMBER_4   &kp N5        &kp NUMBER_6  &kp UNDERSCORE  &kp COLON
&kp LC(Y)  &kp LC(Z)  &kp LC(X)       &kp LC(C)       &kp LC(V)        &kp C_AC_HOME        &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3  &kp COMMA       &kp SLASH  &kp EQUAL
                                      &Mecro_Log      &td_Macro_Net    &trans               &kp BACKSPACE  &kp N0        &kp PERIOD
            >;
        };

        Funtion {
            display-name = "Funtion";
            bindings = <
         &kp F1  &kp F2   &kp F3             &kp F4     &kp LBKT                &kp RBKT               &kp HOME        &kp UP_ARROW      &kp END          &kp PAGE_UP
         &kp F5  &kp F6   &kp F7             &kp F8     &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp PAGE_DOWN
&kp F13  &kp F9  &kp F10  &kp F11            &kp F12    &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT       &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))
                          &kp C_VOLUME_DOWN  &kp SPACE  &kp C_VOLUME_UP         &trans                 &kp LEFT_ARROW  &kp RIGHT_ARROW
            >;
        };

        Shortcut {
            display-name = "Short";
            bindings = <
                    &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)   &kp LG(N5)           &kp LG(NUMBER_6)       &kp LG(N7)     &kp LG(N8)     &kp LG(N9)     &kp LG(N0)
                    &kp LA(LC(A))     &kp LA(LC(S))     &kp LA(LC(D))     &kp LA(LC(F))      &td_mail             &kp LA(LC(H))          &kp LA(LC(J))  &kp LA(LC(K))  &kp LA(LC(L))  &trans
&kp LC(LS(ESCAPE))  &kp Z             &kp LA(LC(X))     &kp LA(LC(C))     &kp LA(LC(V))      &kp LA(LC(B))        &kp LA(LC(SEMICOLON))  &trans         &trans         &trans         &trans      &trans
                                                        &trans            &kp LS(LC(LA(F)))  &kp LS(LA(LC(A)))    &kp C_AL_CALCULATOR    &kp LG(A)      &kp LG(N)
            >;
        };

        Gameadd {
            bindings = <
        &trans  &kp N1  &kp N2  &kp N3  &kp T     &trans  &trans  &kp I   &trans  &trans
        &trans  &kp N4  &kp N5  &kp N6  &kp G     &trans  &kp J   &kp K   &kp L   &trans
&trans  &trans  &kp N7  &kp N8  &kp N9  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &kp N0  &trans    &trans  &trans  &trans
            >;

            label = "Dexter";
        };
    };
};
