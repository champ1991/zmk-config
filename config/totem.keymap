//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Nav         1
#define Sym         2
#define Fun         3
#define Game        4
#define Gameplus    5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <130>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td_Macro_Net: td_Macro_Net {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MACRO_NET";
            #binding-cells = <0>;
            bindings = <&Macro_Net1>, <&Macro_Net2>;

            tapping-term-ms = <350>;
        };

        td_Refresh: td_Refresh {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_REFRESH";
            #binding-cells = <0>;
            bindings = <&kp LC(R)>, <&Mecro_Refresh>;

            tapping-term-ms = <350>;
        };

        td_mail: td_mail {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MAIL";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(G))>, <&kp LA(LC(N))>;
        };

        td_chrome_newtab: td_chrome_newtab {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CHROME_NEWTAB";
            #binding-cells = <0>;
            bindings = <&kp LC(T)>, <&kp LC(LS(T))>;

            tapping-term-ms = <350>;
        };

        over_S_save: over_S_save {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_S_SAVE";
            bindings = <&kp S>, <&kp LC(S)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_I_Up: over_I_Up {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_I_UP";
            bindings = <&kp I>, <&kp LS(UP_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_J_Left: over_J_Left {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_J_LEFT";
            bindings = <&hm LALT J>, <&kp LS(LEFT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_K_Down: over_K_Down {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_K_DOWN";
            bindings = <&hm LEFT_WIN K>, <&kp LS(DOWN_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_L_Right: over_L_Right {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_L_RIGHT";
            bindings = <&hm RCTRL L>, <&kp LS(RIGHT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hmc: homerow_mods_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMC";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <130>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <34>;
        };

        OSM_shift: OSM_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "OSM_SHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <350>;
            quick-release;
        };

        LT_hold: LT_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <140>;
            retro-tap;
        };

        MT_hold: MT_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <200>;
        };

        over_R_f4: over_R_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_R_F4";
            bindings = <&kp R>, <&kp LA(F4)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_D_ctl: over_D_ctl {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_D_CTL";
            bindings = <&kp D>, <&kp LC(D)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_E_ctl: over_E_ctl {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_E_CTL";
            bindings = <&kp E>, <&kp LC(E)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        over_F_ctl: over_F_ctl {
            compatible = "zmk,behavior-mod-morph";
            label = "OVER_F_CTL";
            bindings = <&kp F>, <&kp LC(F)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Delete {
            bindings = <&hm LEFT_ALT DEL>;
            key-positions = <11 12>;
            layers = <0>;
        };

        Korean {
            bindings = <&kp LS(SPACE)>;
            key-positions = <16 17>;
            layers = <0>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <19 18>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        brackets {
            bindings = <&Macro_brackets>;
            key-positions = <13 14>;
            layers = <0 2>;
        };

        caps {
            bindings = <&caps_word>;
            key-positions = <20 31>;
        };

        four {
            bindings = <&kp DOLLAR>;
            key-positions = <4 3>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <27 28>;
            timeout-ms = <350>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <18 17>;
        };

        quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <30 29>;
        };

        Bang {
            bindings = <&hm LEFT_CONTROL EXCLAMATION>;
            key-positions = <23 24>;
            timeout-ms = <350>;
        };

        qua {
            bindings = <&kp SQT>;
            key-positions = <29 28>;
        };

        win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <21 22>;
            timeout-ms = <350>;
        };

        xcut {
            bindings = <&kp LC(X)>;
            key-positions = <22 23>;
            timeout-ms = <350>;
        };

        shift {
            bindings = <&hm LEFT_SHIFT BACKSPACE>;
            key-positions = <13 12>;
        };

        five {
            bindings = <&kp PERCENT>;
            key-positions = <6 5>;
        };

        six {
            bindings = <&kp CARET>;
            key-positions = <6 7>;
        };

        seven {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 7>;
        };

        two {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 2>;
        };

        three {
            bindings = <&kp HASH>;
            key-positions = <2 3>;
        };

        eight {
            bindings = <&none>;
            key-positions = <8 9>;
        };
    };

    macros {
        Macro_Net1: net_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ARROW &kp LEFT_ARROW &kp N0 &kp ENTER>;
            label = "NET_MACRO";
        };

        Macro_Net2: net_macro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ARROW &kp N0 &kp N0 &kp ENTER>;
            label = "NET_MACRO2";
        };

        Mecro_Log: Mecro_Log {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp L &kp D &kp M &kp D &kp D &kp L>;
            label = "MECRO_LOG";
        };

        Mecro_Refresh: Mecro_Refresh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(C) &kp LC(R)>;
            label = "MECRO_REFRESH";
        };

        Macro_brackets: Macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "MACRO_BRACKETS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Totem {
            display-name = "Totem";
            bindings = <
                       &kp Q  &kp W         &over_E_ctl  &over_R_f4   &kp T               &kp Y            &kp U         &over_I_Up     &kp O          &kp P
                       &kp A  &over_S_save  &over_D_ctl  &over_F_ctl  &kp G               &kp H            &over_J_Left  &over_K_Down   &over_L_Right  &kp SEMICOLON
&OSM_shift LEFT_SHIFT  &kp Z  &kp X         &kp C        &kp V        &kp B               &kp N            &kp M         &kp COMMA      &kp PERIOD     &kp SLASH      &OSM_shift RIGHT_SHIFT
                                            &lt 4 TAB    &lt 1 SPACE  &LT_hold 2 ENTER    &lt 3 BACKSPACE  &kp SPACE     &kp LS(SPACE)
            >;
        };

        Media {
            display-name = "Media";
            bindings = <
           &kp F1  &kp F2   &kp F3          &kp F4   &kp K_MUTE           &trans          &trans              &kp LS(UP_ARROW)    &trans               &trans
           &kp F5  &kp F6   &kp F7          &kp F8   &kp C_VOLUME_UP      &kp MINUS       &kp LS(LEFT_ARROW)  &kp LS(DOWN_ARROW)  &kp LS(RIGHT_ARROW)  &kp COLON
&kp LSHFT  &kp F9  &kp F10  &kp F11         &kp F12  &kp C_VOLUME_DOWN    &kp UNDERSCORE  &kp EQUAL           &kp COMMA           &kp PERIOD           &kp SLASH  &kp RSHFT
                            &kp C_PREVIOUS  &trans   &kp C_NEXT           &trans          &trans              &kp DOT
            >;
        };

        Numpad {
            display-name = "Numpad";
            bindings = <
                    &kp TILDE             &kp LC(W)       &kp UP_ARROW    &td_Refresh      &td_chrome_newtab    &kp N7         &kp N8        &kp N9        &kp MINUS       &kp PLUS
                    &hm LEFT_SHIFT LC(A)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(G)            &kp NUMBER_4   &kp N5        &kp NUMBER_6  &kp UNDERSCORE  &kp COLON
&kp LS(LC(ESCAPE))  &kp LC(Z)             &kp LC(X)       &kp LC(C)       &kp LC(V)        &kp C_AC_HOME        &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3  &kp COMMA       &kp SLASH  &kp EQUAL
                                                          &Mecro_Log      &td_Macro_Net    &trans               &kp BACKSPACE  &kp N0        &kp PERIOD
            >;
        };

        Special {
            display-name = "Special";
            bindings = <
           &kp EXCLAMATION  &kp AT_SIGN   &kp HASH  &kp DOLLAR      &kp PERCENT             &kp CARET              &kp AMPERSAND    &kp UP_ARROW       &kp ASTERISK     &kp DOUBLE_QUOTES
           &kp TILDE        &kp QUESTION  &trans    &trans          &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp LEFT_ARROW   &kp DOWN_ARROW     &kp RIGHT_ARROW  &kp SQT
&kp LSHFT  &kp GRAVE        &trans        &trans    &kp LEFT_BRACE  &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp RIGHT_BRACE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp QUESTION       &OSM_shift RIGHT_SHIFT
                                          &kp TAB   &kp SPACE       &kp ENTER               &trans                 &kp LEFT_ARROW   &kp RIGHT_ARROW
            >;
        };

        Shortcut {
            display-name = "Short";
            bindings = <
                    &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)   &kp LG(N5)           &trans  &trans  &trans  &trans  &trans
                    &kp LA(LC(A))     &kp LA(LC(S))     &kp LA(LC(D))     &kp LA(LC(F))      &td_mail             &trans  &trans  &trans  &trans  &trans
&kp LC(LS(ESCAPE))  &kp Z             &kp LA(LC(X))     &kp LA(LC(C))     &kp LA(LC(V))      &kp LA(LC(B))        &trans  &trans  &trans  &trans  &trans  &trans
                                                        &trans            &kp LS(LC(LA(F)))  &kp LS(LA(LC(A)))    &trans  &trans  &trans
            >;
        };

        Dexter {
            bindings = <
           &kp Q  &kp W  &kp F  &kp P  &kp B    &kp J  &kp L      &kp U      &kp Y    &kp SEMI
           &kp A  &kp R  &kp S  &kp T  &kp G    &kp M  &kp N      &kp E      &kp I    &kp O
&kp LSHFT  &kp Z  &kp X  &kp C  &kp D  &kp V    &kp K  &kp H      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &sk A  &kp A  &kp A    &kp A  &kp SPACE  &trans
            >;

            label = "Dexter";
        };
    };
};
